{"ts":1354211894016,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*global define*/\n(function (global, undefined) {\n\t\"use strict\";\n\n\tvar document = global.document,\n\t    Alertify;\n\n\tAlertify = function () {\n\n\t\tvar $, addListeners, bind, build, close, hide, init, notify, setup, unbind,\n\t\t    dialog, extend, log,\n\t\t    cover, dialogs, delay, element, isopen, keys, labels, logElement, queue;\n\n\t\tdialogs = {\n\t\t\tbuttons : {\n\t\t\t\tholder : \"<nav class=\\\"alertify-buttons\\\">{{buttons}}</nav>\",\n\t\t\t\tok     : \"<a href=\\\"#\\\" class=\\\"alertify-button alertify-button-ok\\\" id=\\\"aOK\\\">{{ok}}</a>\",\n\t\t\t\tcancel : \"<a href=\\\"#\\\" class=\\\"alertify-button alertify-button-cancel\\\" id=\\\"aCancel\\\">{{cancel}}</a>\"\n\t\t\t},\n\t\t\tinput   : \"<input type=\\\"text\\\" class=\\\"alertify-text\\\" id=\\\"aText\\\">\",\n\t\t\tmessage : \"<p class=\\\"alertify-message\\\">{{message}}</p>\",\n\t\t\tlog     : \"<article class=\\\"alertify-log{{class}}\\\">{{message}}</article>\"\n\t\t};\n\n\t\tdelay   = 5000;\n\t\tkeys    = { ENTER: 13, ESC: 27 };\n\t\tlabels  = { ok: \"OK\", cancel: \"Cancel\" };\n\t\tqueue   = [];\n\t\tisopen  = false;\n\n\t\t/**\n\t\t * Shorthand for document.getElementById()\n\t\t * \n\t\t * @param  {String} id    A specific element ID\n\n\t\t * @return {Object}       HTML element\n\t\t */\n\t\t$ = function (id) {\n\t\t\treturn document.getElementById(id);\n\t\t};\n\n\t\t/**\n\t\t * Set the proper button click events\n\t\t *\n\t\t * @param {Function} fn    [Optional] Callback function\n\t\t *\n\t\t * @return {undefined}\n\t\t */\n\t\taddListeners = function (fn) {\n\t\t\tvar btnOK     = $(\"aOK\")     || undefined,\n\t\t\t    btnCancel = $(\"aCancel\") || undefined,\n\t\t\t    input     = $(\"aText\")   || undefined,\n\t\t\t    hasOK     = (typeof btnOK !== \"undefined\"),\n\t\t\t    hasCancel = (typeof btnCancel !== \"undefined\"),\n\t\t\t    val       = \"\",\n\t\t\t    ok, cancel, common, key;\n\n\t\t\t// ok event handler\n\t\t\tok = function (event) {\n\t\t\t\tcommon(event);\n\t\t\t\tif (typeof input !== \"undefined\") val = input.value;\n\t\t\t\tif (typeof fn === \"function\") fn(true, val);\n\t\t\t\tif (typeof event.preventDefault !== \"undefined\") event.preventDefault();\n\t\t\t};\n\n\t\t\t// cancel event handler\n\t\t\tcancel = function (event) {\n\t\t\t\tcommon(event);\n\t\t\t\tif (typeof fn === \"function\") fn(false);\n\t\t\t\tif (typeof event.preventDefault !== \"undefined\") event.preventDefault();\n\t\t\t};\n\n\t\t\t// common event handler (keyup, ok and cancel)\n\t\t\tcommon = function (event) {\n\t\t\t\thide();\n\t\t\t\tunbind(document.body, \"keyup\", key);\t\t\t\t\n\t\t\t};\n\n\t\t\t// keyup handler\n\t\t\tkey = function (event) {\n\t\t\t\tvar keyCode = event.keyCode;\n\t\t\t\tif (keyCode === keys.ENTER && hasOK) ok(event);\n\t\t\t\telse if (keyCode === keys.ESC && hasCancel) cancel(event);\n\t\t\t};\n\n\t\t\t// handle OK click\n\t\t\tif (hasOK) bind(btnOK, \"click\", ok);\n\t\t\t// handle Cancel click\n\t\t\tif (hasCancel) bind(btnCancel, \"click\", cancel);\n\t\t\t\n\t\t\t// clear focus off activeElement element to ensure\n\t\t\t// the ENTER key triggers the correct behaviour\n\t\t\t// Firefox has an issue if this isn't done and the current\n\t\t\t// focus is an anchor\n\t\t\tdocument.activeElement.blur();\n\t\t\t// listen for keys, OK => ENTER, Cancel => ESC\n\t\t\tbind(document.body, \"keyup\", key);\n\t\t};\n\n\t\t/**\n\t\t * Bind events to elements\n\t\t * \n\t\t * @param  {Object}   el       HTML Object\n\t\t * @param  {Event}    event    Event to attach to element\n\t\t * @param  {Function} fn       Callback function\n\t\t * \n\t\t * @return {undefined}\n\t\t */\n\t\tbind = function (el, event, fn) {\n\t\t\tif (typeof el.addEventListener === \"function\") {\n\t\t\t\tel.addEventListener(event, fn, false);\n\t\t\t} else if (el.attachEvent) {\n\t\t\t\tel.attachEvent(\"on\" + event, fn);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Build the proper message box\n\t\t * \n\t\t * @param  {Object} item    Current object in the queue\n\t\t * @return {String}         An HTML string of the message box\n\t\t */\n\t\tbuild = function (item) {\n\t\t\tvar html    = \"\",\n\t\t\t    type    = item.type,\n\t\t\t    message = item.message;\n\n\t\t\thtml += \"<div class=\\\"alertify-dialog\\\">\";\n\t\t\thtml += \"<article class=\\\"alertify-inner\\\">\";\n\t\t\thtml += dialogs.message.replace(\"{{message}}\", message);\n\n\t\t\tif (type === \"prompt\") { html += dialogs.input; }\n\n\t\t\thtml += dialogs.buttons.holder;\n\t\t\thtml += \"</article>\";\n\t\t\thtml += \"</div>\";\n\n\t\t\tswitch (type) {\n\t\t\tcase \"confirm\":\n\t\t\tcase \"prompt\":\n\t\t\t\thtml = html.replace(\"{{buttons}}\", dialogs.buttons.cancel + dialogs.buttons.ok);\n\t\t\t\thtml = html.replace(\"{{ok}}\", labels.ok).replace(\"{{cancel}}\", labels.cancel);\n\t\t\t\tbreak;\n\t\t\tcase \"alert\":\n\t\t\t\thtml = html.replace(\"{{buttons}}\", dialogs.buttons.ok);\n\t\t\t\thtml = html.replace(\"{{ok}}\", labels.ok);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\telement.className = \"alertify alertify-show alertify-\" + type;\n\t\t\tcover.className   = \"alertify-cover\";\n\t\t\treturn html;\n\t\t};\n\n\t\t/**\n\t\t * Close the log messages\n\t\t * \n\t\t * @return {undefined}\n\t\t */\n\t\tclose = function () {\n\t\t\tsetTimeout(function () {\n\t\t\t\tvar child = logElement.childNodes[logElement.childNodes.length - 1];\n\t\t\t\tif (typeof child !== \"undefined\") logElement.removeChild(child);\n\t\t\t}, delay);\n\t\t};\n\n\t\t/**\n\t\t * Hide the dialog and rest to defaults\n\t\t *\n\t\t * @return {undefined}\n\t\t */\n\t\thide = function () {\n\t\t\t// remove reference from queue\n\t\t\tqueue.splice(0,1);\n\t\t\t// if items remaining in the queue\n\t\t\tif (queue.length > 0) setup();\n\t\t\telse {\n\t\t\t\tisopen = false;\n\t\t\t\telement.className = \"alertify alertify-hide alertify-hidden\";\n\t\t\t\tcover.className   = \"alertify-cover alertify-hidden\";\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Initialize Alertify\n\t\t * Create the 2 main elements\n\t\t *\n\t\t * @return {undefined}\n\t\t */\n\t\tinit = function () {\n\t\t\t// ensure legacy browsers support html5 tags\n\t\t\tdocument.createElement(\"nav\");\n\t\t\tdocument.createElement(\"article\");\n\t\t\tdocument.createElement(\"section\");\n\t\t\t// cover\n\t\t\tcover = document.createElement(\"div\");\n\t\t\tcover.setAttribute(\"id\", \"alertifycover\");\n\t\t\tcover.className = \"alertify-cover alertify-hidden\";\n\t\t\tdocument.body.appendChild(cover);\n\t\t\t// main element\n\t\t\telement = document.createElement(\"section\");\n\t\t\telement.setAttribute(\"id\", \"alertify\");\n\t\t\telement.className = \"alertify alertify-hidden\";\n\t\t\tdocument.body.appendChild(element);\n\t\t\t// main element\n\t\t\tlogElement = document.createElement(\"section\");\n\t\t\tlogElement.setAttribute(\"id\", \"alertifylogs\");\n\t\t\tlogElement.className = \"alertify-logs\";\n\t\t\tdocument.body.appendChild(logElement);\n\t\t};\n\n\t\t/**\n\t\t * Add new log message\n\t\t * If a type is passed, a class name \"alertify-log-{type}\" will get added.\n\t\t * This allows for custom look and feel for various types of notifications.\n\t\t * \n\t\t * @param  {String} message    The message passed from the callee\n\t\t * @param  {String} type       [Optional] Type of log message\n\t\t * \n\t\t * @return {undefined}\n\t\t */\n\t\tnotify = function (message, type) {\n\t\t\tvar log = document.createElement(\"article\");\n\t\t\tlog.className = \"alertify-log\" + ((typeof type === \"string\" && type !== \"\") ? \" alertify-log-\" + type : \"\");\n\t\t\tlog.innerHTML = message;\n\t\t\t// prepend child\n\t\t\tlogElement.insertBefore(log, logElement.firstChild);\n\t\t\t// triggers the CSS animation\n\t\t\tsetTimeout(function() { log.className = log.className + \" alertify-log-show\"; }, 50);\n\t\t\tclose();\n\t\t};\n\n\t\t/**\n\t\t * Initiate all the required pieces for the dialog box\n\t\t *\n\t\t * @return {undefined}\n\t\t */\n\t\tsetup = function () {\n\t\t\tvar item = queue[0];\n\t\t\t\n\t\t\tisopen = true;\n\t\t\telement.innerHTML = build(item);\n\t\t\taddListeners(item.callback);\n\t\t\t// adding focus to prompt input box\n\t\t\t// doesn't work without a setTimeout... \n\t\t\tif (item.type === \"prompt\") global.setTimeout(function () { document.getElementById(\"aText\").focus(); }, 0);\n\t\t};\n\n\t\t/**\n\t\t * Unbind events to elements\n\t\t * \n\t\t * @param  {Object}   el       HTML Object\n\t\t * @param  {Event}    event    Event to detach to element\n\t\t * @param  {Function} fn       Callback function\n\t\t * \n\t\t * @return {undefined}\n\t\t */\n\t\tunbind = function (el, event, fn) {\n\t\t\tif (typeof el.removeEventListener === \"function\") {\n\t\t\t\tel.removeEventListener(event, fn, false);\n\t\t\t} else if (el.detachEvent) {\n\t\t\t\tel.detachEvent(\"on\" + event, fn);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Create a dialog box\n\t\t * \n\t\t * @param  {String}   message    The message passed from the callee\n\t\t * @param  {String}   type       Type of dialog to create\n\t\t * @param  {Function} fn         [Optional] Callback function\n\t\t * \n\t\t * @return {Object}\n\t\t */\n\t\tdialog = function (message, type, fn) {\n\t\t\t// error catching\n\t\t\tif (typeof message !== \"string\") throw new Error(\"message must be a string\");\n\t\t\tif (typeof type !== \"string\") throw new Error(\"type must be a string\");\n\t\t\tif (typeof fn !== \"undefined\" && typeof fn !== \"function\") throw new Error(\"fn must be a function\");\n\n\t\t\tqueue.push({ type: type, message: message, callback: fn });\n\t\t\tif (!isopen) setup();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t/**\n\t\t * Extend the log method to create custom methods\n\t\t * \n\t\t * @param  {String} type    Custom method name\n\t\t * @return {Function}\n\t\t */\n\t\textend = function (type) {\n\t\t\treturn function (message) { log(message, type); };\n\t\t};\n\n\t\t/**\n\t\t * Show a new log message box\n\t\t * \n\t\t * @param  {String} message    The message passed from the callee\n\t\t * @param  {String} type       [Optional] Optional type of log message\n\t\t * \n\t\t * @return {Object}\n\t\t */\n\t\tlog = function (message, type) {\n\t\t\tnotify(message, type);\n\t\t\treturn this;\n\t\t};\n\n\t\t// Bootstrap\n\t\tinit();\n\n\t\treturn {\n\t\t\talert   : function (message, fn) { dialog(message, \"alert\", fn); return this; },\n\t\t\tconfirm : function (message, fn) { dialog(message, \"confirm\", fn); return this; },\n\t\t\textend  : extend,\n\t\t\tlog     : log,\n\t\t\tprompt  : function (message, fn) { dialog(message, \"prompt\", fn); return this; },\n\t\t\tsuccess : function (message) { log(message, \"success\"); return this; },\n\t\t\terror   : function (message) { log(message, \"error\"); return this; },\n\t\t\tdelay   : delay,\n\t\t\tlabels  : labels\n\t\t};\n\t};\n\n\t// AMD and window support\n\tif (typeof define === \"function\") {\n\t\tdefine([], function () { return new Alertify(); });\n\t} else {\n\t\tif (typeof global.alertify === \"undefined\") { global.alertify = new Alertify(); }\n\t}\n\n}(this));"]],"start1":0,"start2":0,"length1":0,"length2":9766}]],"length":9766}
{"contributors":[],"silentsave":false,"ts":1354211998765,"patch":[[{"diffs":[[0," ok(event);\n"],[1,"                else if (keyCode === keys.ESC && hasOk && !hasCancel) ok(event);\n"],[0,"\t\t\t\telse if "]],"start1":2419,"start2":2419,"length1":24,"length2":105}]],"length":9847,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354214922092,"patch":[[{"diffs":[[0," && hasO"],[-1,"k"],[1,"K"],[0," && !has"]],"start1":2476,"start2":2476,"length1":17,"length2":17}]],"length":9847,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354215323222,"patch":[[{"diffs":[[0,"ument,\n\t"],[-1,"    "],[1,"\t"],[0,"Alertify"]],"start1":92,"start2":92,"length1":20,"length2":17},{"diffs":[[0,"bind,\n\t\t"],[-1,"    "],[1,"\t"],[0,"dialog, "]],"start1":211,"start2":211,"length1":20,"length2":17},{"diffs":[[0," log,\n\t\t"],[-1,"    "],[1,"\t"],[0,"cover, d"]],"start1":235,"start2":235,"length1":20,"length2":17}]],"length":9838,"saved":false}
{"ts":1354215337966,"patch":[[{"diffs":[[0,"ument,\n\t"],[-1,"\t"],[1,"    "],[0,"Alertify"]],"start1":92,"start2":92,"length1":17,"length2":20},{"diffs":[[0,"bind,\n\t\t"],[-1,"\t"],[1,"    "],[0,"dialog, "]],"start1":214,"start2":214,"length1":17,"length2":20},{"diffs":[[0," log,\n\t\t"],[-1,"\t"],[1,"    "],[0,"cover, d"]],"start1":241,"start2":241,"length1":17,"length2":20}]],"length":9847,"saved":false}
